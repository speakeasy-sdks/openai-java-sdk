/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package openai.javasdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OpenAIFile - The `File` object represents a document that has been uploaded to OpenAI.
 * 
 */

public class OpenAIFile {
    /**
     * The size of the file in bytes.
     */
    @JsonProperty("bytes")
    public Long bytes;

    public OpenAIFile withBytes(Long bytes) {
        this.bytes = bytes;
        return this;
    }
    
    /**
     * The unix timestamp for when the file was created.
     */
    @JsonProperty("created_at")
    public Long createdAt;

    public OpenAIFile withCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The name of the file.
     */
    @JsonProperty("filename")
    public String filename;

    public OpenAIFile withFilename(String filename) {
        this.filename = filename;
        return this;
    }
    
    /**
     * The file identifier, which can be referenced in the API endpoints.
     */
    @JsonProperty("id")
    public String id;

    public OpenAIFile withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The object type, which is always "file".
     */
    @JsonProperty("object")
    public String object;

    public OpenAIFile withObject(String object) {
        this.object = object;
        return this;
    }
    
    /**
     * The intended purpose of the file. Currently, only "fine-tune" is supported.
     */
    @JsonProperty("purpose")
    public String purpose;

    public OpenAIFile withPurpose(String purpose) {
        this.purpose = purpose;
        return this;
    }
    
    /**
     * The current status of the file, which can be either `uploaded`, `processed`, `pending`, `error`, `deleting` or `deleted`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public OpenAIFile withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Additional details about the status of the file. If the file is in the `error` state, this will include a message describing the error.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status_details")
    public String statusDetails;

    public OpenAIFile withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }
    
    public OpenAIFile(@JsonProperty("bytes") Long bytes, @JsonProperty("created_at") Long createdAt, @JsonProperty("filename") String filename, @JsonProperty("id") String id, @JsonProperty("object") String object, @JsonProperty("purpose") String purpose) {
        this.bytes = bytes;
        this.createdAt = createdAt;
        this.filename = filename;
        this.id = id;
        this.object = object;
        this.purpose = purpose;
  }
}
