/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package openai.javasdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateAnswerRequest {
    /**
     * List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
     * 
     * You should specify either `documents` or a `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")public String[] documents;
    public CreateAnswerRequest withDocuments(String[] documents) {
        this.documents = documents;
        return this;
    }
    
    /**
     * List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
     */
    @JsonProperty("examples")public String[][] examples;
    public CreateAnswerRequest withExamples(String[][] examples) {
        this.examples = examples;
        return this;
    }
    
    /**
     * A text snippet containing the contextual information used to generate the answers for the `examples` you provide.
     */
    @JsonProperty("examples_context")public String examplesContext;
    public CreateAnswerRequest withExamplesContext(String examplesContext) {
        this.examplesContext = examplesContext;
        return this;
    }
    
    /**
     * If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expand")public Object[] expand;
    public CreateAnswerRequest withExpand(Object[] expand) {
        this.expand = expand;
        return this;
    }
    
    /**
     * The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     * 
     * You should specify either `documents` or a `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file")public String file;
    public CreateAnswerRequest withFile(String file) {
        this.file = file;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logit_bias")public Object logitBias;
    public CreateAnswerRequest withLogitBias(Object logitBias) {
        this.logitBias = logitBias;
        return this;
    }
    
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     * 
     * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
     * 
     * When `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")public Long logprobs;
    public CreateAnswerRequest withLogprobs(Long logprobs) {
        this.logprobs = logprobs;
        return this;
    }
    
    /**
     * The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_rerank")public Long maxRerank;
    public CreateAnswerRequest withMaxRerank(Long maxRerank) {
        this.maxRerank = maxRerank;
        return this;
    }
    
    /**
     * The maximum number of tokens allowed for the generated answer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_tokens")public Long maxTokens;
    public CreateAnswerRequest withMaxTokens(Long maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }
    
    /**
     * ID of the model to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     */
    @JsonProperty("model")public String model;
    public CreateAnswerRequest withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * How many answers to generate for each question.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("n")public Long n;
    public CreateAnswerRequest withN(Long n) {
        this.n = n;
        return this;
    }
    
    /**
     * Question to get answered.
     */
    @JsonProperty("question")public String question;
    public CreateAnswerRequest withQuestion(String question) {
        this.question = question;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_metadata")public Object returnMetadata;
    public CreateAnswerRequest withReturnMetadata(Object returnMetadata) {
        this.returnMetadata = returnMetadata;
        return this;
    }
    
    /**
     * If set to `true`, the returned JSON will include a "prompt" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_prompt")public Boolean returnPrompt;
    public CreateAnswerRequest withReturnPrompt(Boolean returnPrompt) {
        this.returnPrompt = returnPrompt;
        return this;
    }
    
    /**
     * ID of the model to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_model")public String searchModel;
    public CreateAnswerRequest withSearchModel(String searchModel) {
        this.searchModel = searchModel;
        return this;
    }
    
    /**
     * completions_stop_description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stop")public Object stop;
    public CreateAnswerRequest withStop(Object stop) {
        this.stop = stop;
        return this;
    }
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")public Double temperature;
    public CreateAnswerRequest withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")public Object user;
    public CreateAnswerRequest withUser(Object user) {
        this.user = user;
        return this;
    }
    
}
