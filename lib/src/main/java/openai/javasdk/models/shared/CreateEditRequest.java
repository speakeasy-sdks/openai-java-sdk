/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package openai.javasdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class CreateEditRequest {
    /**
     * The input text to use as a starting point for the edit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("input")
    public String input;

    public CreateEditRequest withInput(String input) {
        this.input = input;
        return this;
    }
    
    /**
     * The instruction that tells the model how to edit the prompt.
     */
    @JsonProperty("instruction")
    public String instruction;

    public CreateEditRequest withInstruction(String instruction) {
        this.instruction = instruction;
        return this;
    }
    
    /**
     * ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
     */
    @JsonProperty("model")
    public Object model;

    public CreateEditRequest withModel(Object model) {
        this.model = model;
        return this;
    }
    
    /**
     * How many edits to generate for the input and instruction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("n")
    public Long n;

    public CreateEditRequest withN(Long n) {
        this.n = n;
        return this;
    }
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;

    public CreateEditRequest withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top_p")
    public Double topP;

    public CreateEditRequest withTopP(Double topP) {
        this.topP = topP;
        return this;
    }
    
    public CreateEditRequest(@JsonProperty("instruction") String instruction, @JsonProperty("model") Object model) {
        this.instruction = instruction;
        this.model = model;
  }
}
