/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package openai.javasdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateCompletionRequest {
    /**
     * Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
     * 
     * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return \u2013 `best_of` must be greater than `n`.
     * 
     * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("best_of")
    public Long bestOf;

    public CreateCompletionRequest withBestOf(Long bestOf) {
        this.bestOf = bestOf;
        return this;
    }
    
    /**
     * Echo back the prompt in addition to the completion
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("echo")
    public Boolean echo;

    public CreateCompletionRequest withEcho(Boolean echo) {
        this.echo = echo;
        return this;
    }
    
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     * 
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency_penalty")
    public Double frequencyPenalty;

    public CreateCompletionRequest withFrequencyPenalty(Double frequencyPenalty) {
        this.frequencyPenalty = frequencyPenalty;
        return this;
    }
    
    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     * 
     * As an example, you can pass `{"50256": -100}` to prevent the &lt;|endoftext|&gt; token from being generated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logit_bias")
    public java.util.Map<String, Object> logitBias;

    public CreateCompletionRequest withLogitBias(java.util.Map<String, Object> logitBias) {
        this.logitBias = logitBias;
        return this;
    }
    
    /**
     * Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
     * 
     * The maximum value for `logprobs` is 5. If you need more than this, please contact us through our [Help center](https://help.openai.com) and describe your use case.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")
    public Long logprobs;

    public CreateCompletionRequest withLogprobs(Long logprobs) {
        this.logprobs = logprobs;
        return this;
    }
    
    /**
     * The maximum number of [tokens](/tokenizer) to generate in the completion.
     * 
     * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_tokens")
    public Long maxTokens;

    public CreateCompletionRequest withMaxTokens(Long maxTokens) {
        this.maxTokens = maxTokens;
        return this;
    }
    
    /**
     * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
     */
    @JsonProperty("model")
    public String model;

    public CreateCompletionRequest withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * How many completions to generate for each prompt.
     * 
     * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("n")
    public Long n;

    public CreateCompletionRequest withN(Long n) {
        this.n = n;
        return this;
    }
    
    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     * 
     * [See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("presence_penalty")
    public Double presencePenalty;

    public CreateCompletionRequest withPresencePenalty(Double presencePenalty) {
        this.presencePenalty = presencePenalty;
        return this;
    }
    
    /**
     * The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
     * 
     * Note that &lt;|endoftext|&gt; is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prompt")
    public Object prompt;

    public CreateCompletionRequest withPrompt(Object prompt) {
        this.prompt = prompt;
        return this;
    }
    
    /**
     * Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stop")
    public Object stop;

    public CreateCompletionRequest withStop(Object stop) {
        this.stop = stop;
        return this;
    }
    
    /**
     * Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stream")
    public Boolean stream;

    public CreateCompletionRequest withStream(Boolean stream) {
        this.stream = stream;
        return this;
    }
    
    /**
     * The suffix that comes after a completion of inserted text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("suffix")
    public String suffix;

    public CreateCompletionRequest withSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * We generally recommend altering this or `top_p` but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;

    public CreateCompletionRequest withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
     * 
     * We generally recommend altering this or `temperature` but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("top_p")
    public Double topP;

    public CreateCompletionRequest withTopP(Double topP) {
        this.topP = topP;
        return this;
    }
    
    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public String user;

    public CreateCompletionRequest withUser(String user) {
        this.user = user;
        return this;
    }
    
    public CreateCompletionRequest(@JsonProperty("model") String model) {
        this.model = model;
  }
}
