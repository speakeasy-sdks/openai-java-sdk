/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package openai.javasdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateClassificationRequest {
    /**
     * A list of examples with labels, in the following format:
     * 
     * `[["The movie is so interesting.", "Positive"], ["It is quite boring.", "Negative"], ...]`
     * 
     * All the label strings will be normalized to be capitalized.
     * 
     * You should specify either `examples` or `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("examples")
    public String[][] examples;

    public CreateClassificationRequest withExamples(String[][] examples) {
        this.examples = examples;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expand")
    public Object expand;

    public CreateClassificationRequest withExpand(Object expand) {
        this.expand = expand;
        return this;
    }
    
    /**
     * The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.
     * 
     * You should specify either `examples` or `file`, but not both.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file")
    public String file;

    public CreateClassificationRequest withFile(String file) {
        this.file = file;
        return this;
    }
    
    /**
     * The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;

    public CreateClassificationRequest withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logit_bias")
    public Object logitBias;

    public CreateClassificationRequest withLogitBias(Object logitBias) {
        this.logitBias = logitBias;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logprobs")
    public Object logprobs;

    public CreateClassificationRequest withLogprobs(Object logprobs) {
        this.logprobs = logprobs;
        return this;
    }
    
    /**
     * The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_examples")
    public Long maxExamples;

    public CreateClassificationRequest withMaxExamples(Long maxExamples) {
        this.maxExamples = maxExamples;
        return this;
    }
    
    @JsonProperty("model")
    public Object model;

    public CreateClassificationRequest withModel(Object model) {
        this.model = model;
        return this;
    }
    
    /**
     * Query to be classified.
     */
    @JsonProperty("query")
    public String query;

    public CreateClassificationRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_metadata")
    public Object returnMetadata;

    public CreateClassificationRequest withReturnMetadata(Object returnMetadata) {
        this.returnMetadata = returnMetadata;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("return_prompt")
    public Object returnPrompt;

    public CreateClassificationRequest withReturnPrompt(Object returnPrompt) {
        this.returnPrompt = returnPrompt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_model")
    public Object searchModel;

    public CreateClassificationRequest withSearchModel(Object searchModel) {
        this.searchModel = searchModel;
        return this;
    }
    
    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;

    public CreateClassificationRequest withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public Object user;

    public CreateClassificationRequest withUser(Object user) {
        this.user = user;
        return this;
    }
    
    public CreateClassificationRequest(@JsonProperty("model") Object model, @JsonProperty("query") String query) {
        this.model = model;
        this.query = query;
  }
}
